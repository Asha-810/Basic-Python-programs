# -*- coding: utf-8 -*-
"""python cs - 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bDldtf1cM53HtAkE6swD9CVaXeifgj8B
"""

#1.  Grades Assignment : Write a program that assigns grades to students based on their scores.
def grades_assign(score):
  if score>=90:
    print("your grade is : A")
  elif score<90 and score>=80:
    print("your grade is : B")
  elif score<80 and score >=60:
    print("your grade is : c")
  elif score<60 and score>=40:
    print("your grade is : D")
  else:
    print("fail")

score=int(input("enter your score: "))
grades_assign(score)

#2.  Age Verification : Write a program that checks if a person is eligible to vote.

age=int(input("enter your age: "))
if age<=18:
    print("Not eligible to vote")
else:
    print("eligible to vote")

#3.  Discount Calculation : Write a program that calculates the final price after applying a discount.

def products(items,discount):
     disc=items-(items*discount/100)
     print(f"your discount is price {disc}")


items_price=int(input("select your items price(TV,Ipad,Laptop): "))
discount=int(input("enter your discount"))
products(items_price,discount)

#4.  Temperature Conversion : Write a program that converts temperature from Celsius to Fahrenheit.
celsius=47
fahrenheit=(celsius * 9/5) + 32
print(f"fahrenheit : {fahrenheit}")

#5.  Even or Odd : Write a program that checks if a number is even or odd.
num=int(input("enter a number: "))
if num%2==0:
    print(f"The number is even :{num}")
else:
    print(f"The number is odd :{num}")

#6.  Positive or Negative : Write a program that checks if a number is positive, negative, or zero.
num=int(input("enter a number: "))
if num>=1:
  print(f"the number is positive: {num}")
elif num<=-1:
  print(f"the number is negtive: {num}")
else:
  print(f"the number is zero:{num}")

#7.  Student Admission : Write a program that checks if a student is admitted based on their test score.
def grades_assign(score):
  if score<=100 and score>=40:
    print("the student is admitted based on the score")

  else:
    print("the student is not admitted based on the score")

score=int(input("enter your score: "))
grades_assign(score)

#8.  Discount Eligibility : Write a program that checks if a customer is eligible for a discount based on their purchase amount.

def products(items):
  if items>=10000:
     discount=int(input("enter your discount: "))
     disc=items-(items*discount/100)
     print(f"your discount is price {disc}")
  else:
    print("you are not eligible for discount")


items_price=int(input("select your items price(TV,Ipad,Laptop): "))

products(items_price)

#9.  Prime Number Check : Write a program that checks if a number is prime.
num = 11
if num > 1:
    for i in range(2, (num//2)+1):
        if (num % i) == 0:
            print(num, "is not a prime number")
            break
    else:
        print(num, "is a prime number")
else:
    print(num, "is not a prime number")

#10.  BMI Calculator : Write a program that calculates the Body Mass Index (BMI) and categorizes it.

def BMI(height, weight):
    bmi = weight/(height**2)
    return bmi


height = 1.79832
weight = 70
bmi = BMI(height, weight)

print("The BMI is", format(bmi), "so ", end='')


if (bmi < 18.5):
    print("underweight")

elif ( bmi >= 18.5 and bmi < 24.9):
    print("Healthy")

elif ( bmi >= 24.9 and bmi < 30):
    print("overweight")

elif ( bmi >=30):
    print("Suffering from Obesity")

#11. Divisibility Check :  Write a Python program that checks if a number is divisible by 3, 5, or both.
num=int(input("enter a number: "))
if num%3==0 and num%5==0:
  print(f"{num} is divisible by both 3 and 5")
elif num%3==0:
  print(f"{num} is divisible by 3")
elif num % 5 ==0:
  print(f"{num} is divisible by 5")
else:
  print("invalid")

#12. Quadratic Equation Solver:  Write a Python program that solves quadratic equations (ax^2 + bx + c = 0) and displays the roots.
#(ax^2 + bx + c = 0)
import cmath  # Importing cmath to handle complex roots

def solve_quadratic(a, b, c):
    # Check if 'a' is zero to avoid division by zero
    if a == 0:
        if b == 0:
            return "No solution, as both a and b are zero."
        else:
            return f"Linear equation solution: x = {-c / b}"

    # Calculate the discriminant
    discriminant = (b ** 2) - (4 * a * c)

    # Calculate the two roots using the quadratic formula
    root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
    root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)

    # Return the roots
    return root1, root2

# Input coefficients
print("Quadratic Equation Solver")
a = float(input("Enter the coefficient a: "))
b = float(input("Enter the coefficient b: "))
c = float(input("Enter the coefficient c: "))

# Solve the equation and display the roots
result = solve_quadratic(a, b, c)
print(f"The roots of the quadratic equation are: {result}")

#13. Number Range Check :
#   : : Write a Python program that checks if a given number lies within a certain range [10, 20].

num=int(input("enter a number: "))
if num in range(10,21):
  print(f"the number lies between the range {num}")
else:
  print("the number does not lies betweent the range")

#14.  Triangle Validity :
 #  : : Write a Python program to check whether a triangle is valid or not given its three sides.

a=int(input("enter a number:"))
b=int(input("enter a number:"))
c=int(input("enter a number:"))
sum=a+b+c
if a+b>c and a+c>b and b+c>a:
  print("the triangle is valid")
else:
  print("the triangle is not valid")

#15. Password Strength Check :
#   : : Write a Python program to check the strength of a password. It should have at least 8 characters, include at least one number, and at least one uppercase letter.

import re

def check_password_strength(password):

    if len(password) < 8:
        return "Weak password: Must be at least 8 characters long."


    if not any(char.isupper() for char in password):
        return "Weak password: Must include at least one uppercase letter."


    if not any(char.isdigit() for char in password):
        return "Weak password: Must include at least one number."

    return "Strong password!"


password = input("Enter your password: ")


result = check_password_strength(password)
print(result)

#16. Income Tax Calculation :
#   : : Write a Python program to calculate the income tax based on given slabs:


def calculate_income_tax(income):
    tax = 0
    if income <= 250000:
        tax = 0
    elif income <= 500000:
        tax = (income - 250000) * 0.05
    elif income <= 1000000:
        tax = (250000 * 0.05) + (income - 500000) * 0.2
    else:
        tax = (250000 * 0.05) + (500000 * 0.2) + (income - 1000000) * 0.3

    return tax


try:
    income = float(input("Enter your annual income: ₹ "))
    if income < 0:
        print("Income cannot be negative. Please enter a valid amount.")
    else:
        tax = calculate_income_tax(income)
        print(f"Your total income tax is: ₹ {tax:.2f}")
except ValueError:
    print("Invalid input. Please enter a numeric value.")

#17. Calculate Electricity Bill :
  # : : Write a Python program to calculate the electricity bill based on the following rates:

def calculate_electricity_bill(units):
    bill = 0
    if units <= 100:
        bill = units * 1.5
    elif units <= 300:
        bill = (100 * 1.5) + (units - 100) * 2.5
    elif units <= 500:
        bill = (100 * 1.5) + (200 * 2.5) + (units - 300) * 4
    else:
        bill = (100 * 1.5) + (200 * 2.5) + (200 * 4) + (units - 500) * 6
    return bill


try:
    units = float(input("Enter the total units consumed: "))
    if units < 0:
        print("Units consumed cannot be negative. Please enter a valid number.")
    else:
        total_bill = calculate_electricity_bill(units)
        print(f"Your total electricity bill is: ₹ {total_bill:.2f}")
except ValueError:
    print("Invalid input. Please enter a numeric value.")

#18. Calculate Grade :
#   : : Write a Python program to calculate the grade of a student based on their marks:

score=int(input("enter your grade: "))

if score>=90:
    print("grade is A")
elif score>=80 and score<90:
    print("grade is B")
elif score>=70 and score<80:
    print("grade is C")
elif score>=60 and score<70:
    print("grade is D")
elif score<60 :
    print("grade is F")
else:
    print("low grade")

#19. Convert 24-hour to 12-hour Time Format :
   # : : Write a Python program to convert time from 24-hour format to 12-hour form


def convert_to_12_hour_format(time_24):
    try:

        hours, minutes = map(int, time_24.split(':'))
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            return "Invalid time format. Please enter a valid 24-hour time."
        period = "AM" if hours < 12 else "PM"
        hours_12 = hours % 12
        hours_12 = 12 if hours_12 == 0 else hours_12
        return f"{hours_12:02d}:{minutes:02d} {period}"

    except ValueError:
        return "Invalid input. Please enter time in HH:MM format."



time_24 = input("Enter time in 24-hour format (HH:MM): ")
converted_time = convert_to_12_hour_format(time_24)
print(f"Converted time: {converted_time}")

#20. BMI Categorization :
 #   : : Write a Python program to calculate the BMI (Body Mass Index) and categorize it.


def calculate_bmi(weight, height):
    # Calculate BMI
    bmi = weight / (height ** 2)
    return bmi


def categorize_bmi(bmi):
    # Determine BMI category
    if bmi < 18.5:
        return "Underweight"
    elif 18.5 <= bmi <= 24.9:
        return "Normal weight"
    elif 25 <= bmi <= 29.9:
        return "Overweight"
    else:
        return "Obesity"


# Input from the user
try:
    weight = float(input("Enter your weight in kilograms (kg): "))
    height = float(input("Enter your height in meters (m): "))

    if weight > 0 and height > 0:
        bmi = calculate_bmi(weight, height)
        category = categorize_bmi(bmi)
        print(f"Your BMI is: {bmi:.2f}")
        print(f"You are categorized as: {category}")
    else:
        print("Weight and height must be positive numbers.")
except ValueError:
    print("Invalid input. Please enter numeric values for weight and height.")

#21. Determine Season from Month :
 #   : : Write a Python program to determine the season based on the given month.
def determine_season(month):
    month = month.lower()  # Convert input to lowercase for case-insensitivity

    if month in ("december", "january", "february"):
        return "Winter"
    elif month in ("march", "april", "may"):
        return "Spring"
    elif month in ("june", "july", "august"):
        return "Summer"
    elif month in ("september", "october", "november"):
        return "Autumn"
    else:
        return "Invalid month. Please enter a valid month name."


month = input("Enter the name of a month: ").strip()
season = determine_season(month)
print(f"The season for the month '{month}' is: {season}")

#22.  Day of the Week :
 #   : : Write a Python program that maps a number (1-7) to a day of the week.
def get_day_of_week(number):
    days = {
        1: "Monday",
        2: "Tuesday",
        3: "Wednesday",
        4: "Thursday",
        5: "Friday",
        6: "Saturday",
        7: "Sunday"
    }
    return days.get(number, "Invalid number. Please enter a number between 1 and 7.")


try:
    number = int(input("Enter a number (1-7): "))
    day = get_day_of_week(number)
    print(f"The day of the week for number {number} is: {day}")
except ValueError:
    print("Invalid input. Please enter an integer between 1 and 7.")

#23. Check Vowel or Consonant:: Write a Python program that checks whether a given character is a vowel or consonant.

def check_vowel_or_consonant(char):
    vowels = "aeiou"
    if len(char) != 1 or not char.isalpha():
        return "Invalid input. Please enter a single alphabetic character."

    char = char.lower()
    if char in vowels:
        return f"'{char}' is a Vowel."
    else:
        return f"'{char}' is a Consonant."


char = input("Enter a single character: ").strip()
result = check_vowel_or_consonant(char)
print(result)

#24. Employee Bonus Calculation:: Write a Python program that calculates the bonus for an employee based on their years of service.
# More than 10 years: 10% of the salary
# Between 5 and 10 years: 5% of the salary
# Less than 5 years: 2% of the salary
try:
  years=int(input("enter your years of services; "))
  salary=int(input("enter your salary: "))

  if years>=10:
      bonus=salary*(10/100)
      amount=salary+bonus
      print(f"your bonus salary is : {bonus} total amount is: {amount}")
  elif years >=5 and years<10:
      bonus=salary*(5/100)

      amount=salary+bonus
      print(f"your bonus salary is : {bonus} total amount is: {amount}")
  elif years<5:
      bonus=salary*(2/100)
      amount=salary+bonus
      print(f"your bonus salary is : {bonus} total amount is: {amount}")
  else:
      print("no bonus")
except ValueError:
  print("Invalid input. Please enter a numeric value.")

#25. Check Palindrome:: Write a Python program that checks whether a given string is a palindrome.

def is_palindrome(s):
    s = s.replace(" ", "").lower()
    return s == s[::-1]


string = input("Enter a string: ").strip()
if is_palindrome(string):
    print(f"'{string}' is a palindrome.")
else:
    print(f"'{string}' is not a palindrome.")
